import Handlebars from "handlebars"
const utils = {
  isHTML(HTML = ``) {
    return HTML.includes('<html');
  }, async toDataURL(url) {
    return new Promise((resolve, reject) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.onload = function() {
          var reader = new FileReader();
          reader.onloadend = function() {
            resolve(reader.result);
          };
          reader.readAsDataURL(xhr.response);
        };
        xhr.open('GET', url);
        xhr.responseType = 'blob';
        xhr.send();
      } catch (e) {
        reject(e);
      }
    });

  },

};

export class Printer {
  HTML = ``;

  constructor({url, isDev = true}) {
    this.isDev = isDev;
    this.url = url;
  }

  get loadingEl() {
    return document.querySelector(`*[printer-loading]`);
  }

  get loading() {
    const isExists = this.loadingEl;
    if (isExists) {
      return isExists;
    }
    return this.createLoadingEl();

  }

  set loading(isTrue) {
    if (isTrue === true) {
      this.loading.classList.add('d-none');
    } else {
      const el = this.loading;
      el.remove();
    }
  }

  get isLoading() {
    return !this.loading.classList.contains('d-none');
  }

  async bePreparedForPrint() {
    let res = await fetch(this.url);
    const HTML = await res.text();
    if (utils.isHTML(HTML)) {
      this.HTML = HTML;
    } else {
      throw new Error('Printer.js.I dont think the url has any HTML data');
    }
  }

  async init() {
    await this.bePreparedForPrint();
    return this;
  }

  createLoadingEl() {
    const el = document.createElement('div');
    el.setAttribute('style', `
    width: 100vw;
    height: 100vh;
    background: white;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 999999;
    display: flex;
    justify-content: center;
    `);
    el.innerHTML=`
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
<circle cx="50" cy="50" r="0" fill="none" stroke="#6a6a6a" stroke-width="2">
  <animate attributeName="r" repeatCount="indefinite" dur="1s" values="0;40" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="0s"/>
  <animate attributeName="opacity" repeatCount="indefinite" dur="1s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="0s"/>
</circle><circle cx="50" cy="50" r="0" fill="none" stroke="#979797" stroke-width="2">
  <animate attributeName="r" repeatCount="indefinite" dur="1s" values="0;40" keyTimes="0;1" keySplines="0 0.2 0.8 1" calcMode="spline" begin="-0.5s"/>
  <animate attributeName="opacity" repeatCount="indefinite" dur="1s" values="1;0" keyTimes="0;1" keySplines="0.2 0 0.8 1" calcMode="spline" begin="-0.5s"/>
</circle>
<!-- [ldio] generated by https://loading.io/ --></svg>
    `
    el.setAttribute('printer-loading',"")
    el.classList.add('d-none');
    document.body.appendChild(el);
    return el;
  }

  async print(data) {
    const self = this;
    this.loading = true;
    const iframeEl = document.createElement('iframe');
    // iframeEl.style.display="none"
    // iframeEl.style.display="none"
    iframeEl.setAttribute('style', `
          width: 21cm;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 99999;
    height:  29.7cm;

      `);
    document.body.appendChild(iframeEl);
    const template = Handlebars.compile(this.HTML);
    iframeEl.contentWindow.document.write(template(data));
    if (this.isDev) {
      iframeEl.contentWindow.document.querySelector('body').
          addEventListener('click', function() {
            iframeEl.remove();
          });
    }
    const imgEls = iframeEl.contentWindow.document.querySelectorAll('img');
    for (let i = 0; i < imgEls.length; i++) {
      const imgEl = imgEls[i];
      const src = imgEl.src.trim();
      if (src) {
        // const res = await fetch(src);
        try {
          const base64 = await utils.toDataURL(src);
        } catch (e) {
          console.error(e);
        }

      }
    }
    setTimeout(() => {
      iframeEl.contentWindow.print();
    }, 1000);
    if (!this.isDev) {
      setTimeout(() => {
        self.loading = false;
        iframeEl.remove();

      }, 1000);
    }
  }
}